#!/bin/bash
# github-issue-sync-fixed.sh
# Fixed version of the GitHub issue sync script

set -e

# Set variables
REPO="ericchapman80/choreboard"
OUTPUT_FILE="utilities/data/issues.txt"
TEMP_JSON=$(mktemp)
TEMP_OUTPUT=$(mktemp)

# Log function
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Ensure the output directory exists
mkdir -p "$(dirname "$OUTPUT_FILE")"

# Step 1: Check GitHub CLI authentication
log "üîç Checking GitHub CLI authentication..."
if ! gh auth status; then
    log "‚ùå Error: GitHub CLI not authenticated. Please run 'gh auth login'"
    exit 1
fi

# Step 2: Fetch issues from GitHub
log "‚¨áÔ∏è  Fetching issues from GitHub repository: $REPO"
gh issue list --repo "$REPO" --state all --limit 1000 --json number,title,body,state,labels,milestone > "$TEMP_JSON"

# Check if we got valid JSON
if ! jq empty "$TEMP_JSON" 2>/dev/null; then
    log "‚ùå Error: Failed to fetch valid JSON from GitHub"
    exit 1
fi

# Count issues from GitHub
ISSUE_COUNT=$(jq '. | length' "$TEMP_JSON")
log "‚úÖ Found $ISSUE_COUNT issues on GitHub"

# Step 3: Process the JSON and format the output
log "üîÑ Processing issues..."
{
    echo "# GitHub Issues Sync - $(date)"
    echo "# Total Issues: $ISSUE_COUNT"
    echo "# Generated by github-issue-sync-fixed.sh"
    echo ""
    
    jq -r '.[] | 
        "---\n" +
        "milestone: " + (if .milestone and .milestone.title then .milestone.title else "Uncategorized" end) + "\n" +
        "id: " + (.number | tostring) + "\n" +
        "title: " + (.title | gsub("\n"; " ")) + "\n" +
        "labels: [" + (.labels | map(.name) | join(", ") + "]\n") +
        "state: " + .state + "\n" +
        "body: |\n" + (
            (if .body and (.body | length) > 0 then 
                .body 
                | gsub("\r\n"; "\n")
                | gsub("\n\n+"; "\n\n")
                | split("\n")
                | map(select(. != ""))
                | map("    " + .)
                | join("\n")
            else 
                "    (No description provided)"
            end) + "\n"
        )
    ' "$TEMP_JSON"
} > "$TEMP_OUTPUT"

# Count processed issues by counting IDs
PROCESSED_ISSUES=$(grep -c "^id: " "$TEMP_OUTPUT" || echo "0")

# Step 4: Create backup and update the file
log "üíæ Creating backup of current issues.txt"
cp "$OUTPUT_FILE" "${OUTPUT_FILE}.bak.$(date +%Y%m%d%H%M%S)"

log "‚úèÔ∏è  Writing $PROCESSED_ISSUES issues to $OUTPUT_FILE"
cp "$TEMP_OUTPUT" "$OUTPUT_FILE"

# Step 5: Clean up
rm -f "$TEMP_JSON" "$TEMP_OUTPUT"

# Final summary
echo ""
echo "=== ‚úÖ Sync Completed ==="
echo "GitHub Issues: $ISSUE_COUNT"
echo "Processed Issues: $PROCESSED_ISSUES"
echo "Output File: $OUTPUT_FILE"

if [ "$ISSUE_COUNT" -ne "$PROCESSED_ISSUES" ]; then
    echo "‚ö†Ô∏è  Warning: Issue count mismatch! Please check the logs."
    exit 1
else
    echo "‚úÖ Success: All issues synchronized correctly!"
fi

exit 0
